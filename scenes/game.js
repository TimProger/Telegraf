const { Markup, Composer, Scenes } = require("telegraf");

const gameFirstStep = new Composer();
gameFirstStep.on("text", async (ctx) => {
  try {
    ctx.wizard.state.data = {};
    await ctx.replyWithHTML(
      "–¢–µ–±–µ –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –∫–æ—Ç–æ—Ä–æ–µ —è –∑–∞–≥–∞–¥–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º? –ï—Å–ª–∏ –≥–æ—Ç–æ–≤, –ø–∏—à–∏ '–î–∞', –∏–Ω–∞—á–µ –ø–∏—à–∏ '–ù–µ—Ç'",
      Markup.keyboard([["–î–∞", "–ù–µ—Ç"]])
        .oneTime()
        .resize()
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});
const getNum = (max, min) => Math.floor(Math.random() * (max - min + 1)) + min;
let num = getNum(100, 1);
const gameSecondStep = new Composer();
gameSecondStep.on("text", async (ctx) => {
  try {
    ctx.wizard.state.data.ready = ctx.message.text;
    if (
      ctx.wizard.state.data.ready.toLowerCase() === "–¥–∞" ||
      ctx.wizard.state.data.ready.toLowerCase() === "lf"
    ) {
      num = getNum(100, 1);
      await ctx.replyWithHTML(
        "–û—Ç–ª–∏—á–Ω–æ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —Å–∫–∞–∂–∏ –º–Ω–µ, –∫–∞–∫–æ–µ <b>—á–∏—Å–ª–æ</b> —è –∑–∞–≥–∞–¥–∞–ª?"
      );
      await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.");
      return ctx.wizard.next();
    } else {
      await ctx.replyWithHTML("–ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç, —É–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–µ –±—É–¥—É.");
      return ctx.scene.leave();
    }
  } catch (e) {
    console.log(e);
  }
});
const gameThirdStep = new Composer();
gameThirdStep.on("text", async (ctx) => {
  try {
    ctx.wizard.state.data.num = ctx.message.text;
    if (ctx.wizard.state.data.num === num.toString()) {
      await ctx.replyWithHTML("üî• –≠—Ç–æ <b>–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π</b> –æ—Ç–≤–µ—Ç, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! üî•");
      return ctx.scene.leave();
    } else if (+ctx.wizard.state.data.num > num) {
      await ctx.replyWithHTML(
        "–ù–µ –≤–µ—Ä–Ω–æ, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ <b>–ú–ï–ù–¨–®–ï</b> –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
      );
    } else if (+ctx.wizard.state.data.num < num) {
      await ctx.replyWithHTML(
        "–ù–µ –≤–µ—Ä–Ω–æ, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ <b>–ë–û–õ–¨–®–ï</b> –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
      );
    }
  } catch (e) {
    console.log(e);
  }
});

const gameScene = new Scenes.WizardScene(
  "botWizard",
  gameFirstStep,
  gameSecondStep,
  gameThirdStep
);
module.exports = gameScene;
