const { Markup, Composer, Scenes} = require('telegraf')

const startStep = new Composer()
startStep.on("text", async (ctx) => {
    try {
        ctx.wizard.state.data = {}
        ctx.wizard.state.data.userName = ctx.message.from.username
        ctx.wizard.state.data.first_name = ctx.message.from.first_name
        ctx.wizard.state.data.last_name = ctx.message.from.last_name
        await ctx.replyWithHTML(`–†–µ—à–∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ø–∏—Å—å–º–æ? –ß—Ç–æ –∂, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –µ–≥–æ –ø—Ä–∏–º—É! –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, <b>–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>`)
        return ctx.wizard.next()        
    } catch (e) {
        console.log(e)
        ctx.replyWithHTML(error)
    }
})

const titleStep = new Composer()
titleStep.on("text", async (ctx) => {
    try {
        ctx.wizard.state.data.name = ctx.message.text
        await ctx.replyWithHTML("–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! ‚úèÔ∏è")
        return ctx.wizard.next()        
    } catch (e) {
        console.log(e)
        ctx.replyWithHTML(error)
    }
})

const lastStep = new Composer()
lastStep.on("text", async (ctx) => {
    try {
        ctx.wizard.state.data.text = ctx.message.text
        const message = `<b>–ò–º—è</b>\n${ctx.wizard.state.data.name}\n\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>\n${ctx.wizard.state.data.text}`
        await ctx.replyWithHTML(`${message} \n\n <i>–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üì¨</i>`)
        return ctx.scene.leave()        
    } catch (e) {
        console.log(e)
        ctx.replyWithHTML(error)
        
    }
})

const sendScene = new Scenes.WizardScene('timWizard', startStep, titleStep, lastStep)
module.exports = sendScene